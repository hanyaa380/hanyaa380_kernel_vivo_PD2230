# SPDX-License-Identifier: GPL-2.0
#
# kbuild file for firmware/
#

# Create $(fwabs) from $(CONFIG_EXTRA_FIRMWARE_DIR) -- if it doesn't have a
# leading /, it's relative to $(srctree).
fwdir := $(subst $(quote),,$(CONFIG_EXTRA_FIRMWARE_DIR))
fwabs := $(addprefix $(srctree)/,$(filter-out /%,$(fwdir)))$(filter /%,$(fwdir))

fw-external-y := $(subst $(quote),,$(CONFIG_EXTRA_FIRMWARE))
#vivo audio add start
fw-external-$(CONFIG_SND_CODEC_TFA9874) += tfa98xx_PD2072.cnt
fw-external-$(CONFIG_SND_CODEC_TFA9874) += tfa98xx_PD2085B.cnt
fw-external-$(CONFIG_SND_CODEC_TFA9874) += tfa98xx_PD2085.cnt
fw-external-$(CONFIG_SND_CODEC_TFA9874) += tfa98xx_PD2120.cnt
fw-external-$(CONFIG_SND_CODEC_TFA9874) += tfa98xx_PD2121.cnt
fw-external-$(CONFIG_SND_CODEC_TFA9874) += tfa98xx_PD2133.cnt
fw-external-$(CONFIG_SND_CODEC_TFA9874) += tfa98xx_PD2133F_EX.cnt
fw-external-$(CONFIG_SND_CODEC_TFA9874) += tfa98xx_PD2135.cnt
fw-external-$(CONFIG_SND_CODEC_TFA9874) += tfa98xx_PD2135F_EX.cnt
fw-external-$(CONFIG_SND_CODEC_TFA9874) += tfa98xx_PD2162.cnt
fw-external-$(CONFIG_SND_CODEC_TFA9874) += tfa98xx_PD2163.cnt
fw-external-$(CONFIG_SND_CODEC_TFA9874) += tfa98xx_PD2163F_EX.cnt


fw-external-$(CONFIG_SND_CODEC_TFA9894) += tfa98xx_PD2156F_EX.cnt
fw-external-$(CONFIG_SND_CODEC_TFA9894) += tfa98xx_PD2159F_EX.cnt
fw-external-$(CONFIG_SND_CODEC_TFA9894) += tfa98xx_PD2166.cnt
fw-external-$(CONFIG_SND_CODEC_TFA9894) += tfa98xx_PD2166F_EX.cnt
fw-external-$(CONFIG_SND_CODEC_TFA9894) += tfa98xx_PD2197F_EX.cnt

fw-external-$(CONFIG_SND_SOC_AW882XX) += aw882xx_acf_PD2188.bin
fw-external-$(CONFIG_SND_SOC_AW881XX) += aw881xx_acf.bin
fw-external-$(CONFIG_SND_SMARTPA_AW882XX) += aw882xx_acf_PD2215F_EX.bin
fw-external-$(CONFIG_SND_SMARTPA_AW882XX) += aw882xx_acf_PD2204F_EX.bin
fw-external-$(CONFIG_SND_SOC_AW87390) += aw87xxx_acf.bin aw87xxx_acf_PD2250.bin
fw-external-$(CONFIG_VIVO_CODEC_FS1599N) += fs1599.fsm
fw-external-$(CONFIG_VIVO_CODEC_SIA81XX) += sipa_PD2230.bin
fw-external-$(CONFIG_SND_SOC_AW87390) += aw87xxx_acf_PD2257F_EX.bin
fw-external-$(CONFIG_SND_SOC_AW87390) += aw87xxx_acf_PD2279.bin
# vivo audio GuoYijia add for PD2279 SIA8159 begin
fw-external-$(CONFIG_SND_SOC_SIAXXXX) += sipa_PD2279.bin
# vivo audio GuoYijia add for PD2279 SIA8159 end
fw-external-$(CONFIG_SND_SOC_AW87390) += aw87xxx_acf_PD2281F_EX.bin
#vivo audio add end

quiet_cmd_fwbin = MK_FW   $@
      cmd_fwbin = FWNAME="$(patsubst firmware/%.gen.S,%,$@)";		     \
		  FWSTR="$(subst /,_,$(subst .,_,$(subst -,_,$(patsubst	     \
				firmware/%.gen.S,%,$@))))";		     \
		  ASM_WORD=$(if $(CONFIG_64BIT),.quad,.long);		     \
		  ASM_ALIGN=$(if $(CONFIG_64BIT),3,2);			     \
		  PROGBITS=$(if $(CONFIG_ARM),%,@)progbits;		     \
		  echo "/* Generated by firmware/Makefile */"		> $@;\
		  echo "    .section .rodata"				>>$@;\
		  echo "    .p2align 4"					>>$@;\
		  echo "_fw_$${FWSTR}_bin:"				>>$@;\
		  echo "    .incbin \"$(2)\""				>>$@;\
		  echo "_fw_end:"					>>$@;\
		  echo "   .section .rodata.str,\"aMS\",$${PROGBITS},1"	>>$@;\
		  echo "    .p2align $${ASM_ALIGN}"			>>$@;\
		  echo "_fw_$${FWSTR}_name:"				>>$@;\
		  echo "    .string \"$$FWNAME\""			>>$@;\
		  echo "    .section .builtin_fw,\"a\",$${PROGBITS}"	>>$@;\
		  echo "    .p2align $${ASM_ALIGN}"			>>$@;\
		  echo "    $${ASM_WORD} _fw_$${FWSTR}_name"		>>$@;\
		  echo "    $${ASM_WORD} _fw_$${FWSTR}_bin"		>>$@;\
		  echo "    $${ASM_WORD} _fw_end - _fw_$${FWSTR}_bin"	>>$@;

# One of these files will change, or come into existence, whenever
# the configuration changes between 32-bit and 64-bit. The .S files
# need to change when that happens.
wordsize_deps := $(wildcard include/config/64bit.h include/config/32bit.h \
		include/config/ppc32.h include/config/ppc64.h \
		include/config/superh32.h include/config/superh64.h \
		include/config/x86_32.h include/config/x86_64.h \
		firmware/Makefile)

$(patsubst %,$(obj)/%.gen.S, $(fw-external-y)): %: $(wordsize_deps) \
		include/config/extra/firmware/dir.h
	$(call cmd,fwbin,$(fwabs)/$(patsubst $(obj)/%.gen.S,%,$@))

# The .o files depend on the binaries directly; the .S files don't.
$(patsubst %,$(obj)/%.gen.o, $(fw-external-y)): $(obj)/%.gen.o: $(fwdir)/%

obj-y				 += $(patsubst %,%.gen.o, $(fw-external-y))

ifeq ($(KBUILD_SRC),)
# Makefile.build only creates subdirectories for O= builds, but external
# firmware might live outside the kernel source tree
_dummy := $(foreach d,$(addprefix $(obj)/,$(dir $(fw-external-y))), $(shell [ -d $(d) ] || mkdir -p $(d)))
endif

targets := $(patsubst $(obj)/%,%, \
                                $(shell find $(obj) -name \*.gen.S 2>/dev/null))
# Without this, built-in.o won't be created when it's empty, and the
# final vmlinux link will fail.
obj- := dummy
